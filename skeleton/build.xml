<project name="Compiler" default="jar" basedir=".">
  <!-- Manually generated java files -->
  <property name="src"     location="src"     />
  <!-- Auto-generated java files -->
  <property name="java"    location="java"    />
  <!-- Target Dir for compile -->
  <property name="classes" location="classes" />
  <!-- Jar directory -->
  <property name="dist"    location="dist"    />
  <!-- Runtime libraries -->
  <property name="lib"     location="lib"     />
  <!-- Binaries for tools, etc. -->
  <property name="bin"     location="bin"     />
  <!-- Directory containing tests -->
  <property name="tests"   location="test"    />

  <!-- We rely on ANTLR 2.7.7  -->
  
  <!-- Build up a path structure for a classpath 
       that includes the binaries (jars) in bin/ and 
       the existing classpath.  Not used now, 
       because the jflex and cup task define their own cp, 
       but could come in handly later. -->
  <path id="binaries">
    <pathelement location="${bin}" />
    <fileset dir="${bin}">
      <include name="**/*.jar" />
      <include name="**/*.zip" />
    </fileset>
    <pathelement path="${java.class.path}" />
    <pathelement path="${classes}" />
  </path>

  <!-- Build up a path structure for a classpath 
       that includes the libraries and the existing classpath -->
  <path id="libraries">
    <pathelement location="${lib}" />
    <fileset dir="${lib}">
      <include name="**/*.jar" />
      <include name="**/*.zip" />
    </fileset>
    <pathelement path="${java.class.path}" />
  </path>

  <target name="init">
    <mkdir dir="${classes}"/>
    <mkdir dir="${java}"/>
    <mkdir dir="${dist}"/>
    <mkdir dir="${java}/decaf"/>
  </target>

  <!-- copy manual edited sources to automatically generated ones -->
  <target name="copy_src" depends="init">
   <copy todir="${java}">
     <fileset dir="${src}" includes="**/**.java" />
   </copy>
  </target>

  <target name="grammar" depends="init">
    <java jar="${lib}/antlr.jar" fork="true">
      <arg value="-o"/>
      <arg value="${java}/decaf"/>
      <arg value="${src}/grammar/Grammar.g4"/>
    </java>
  </target>

  <target name="compile" depends="grammar">
    <javac srcdir="${java}:${src}" destdir="${classes}" debug="on">
      <classpath refid="libraries"/>
    </javac>
  </target>

  <target name="jar" depends="compile">
    <jar jarfile="${dist}/Compiler.jar" basedir="${classes}">
     <manifest>
       <attribute name="Main-Class" value="Main" />
       <!-- ANTLR runtime is needed for parsing! -->
       <attribute name="Class-Path" value="antlr.jar" />
     </manifest>
    </jar>
    <!-- Third party libraries can only be found by java -jar if they reside in the same dir -->
    <copy todir="${dist}">
	<fileset dir="${lib}" includes="**/**.jar"/>
    </copy>
  </target>

  <target name="test_scanner" depends="jar">
    <exec executable="${tests}/scanner/test.sh"/>
    <exec executable="${tests}/scanner-hidden/test.sh"/>
  </target>

  <target name="test_parser" depends="jar">
    <exec executable="${tests}/parser/test.sh"/>
    <exec executable="${tests}/parser-hidden/test.sh"/>
  </target>

  <target name="test_semantic" depends="jar">
    <exec executable="${tests}/semantic/test.sh"/>
    <exec executable="${tests}/semantic-hidden/test.sh"/>
  </target>

  <target name="integration_tests" 
	  depends="test_scanner, test_parser, test_semantic">
  </target>
  
 <!-- to clean, delete everything in the java, classes, and dist
  directory -->
  <target name="clean">
     <delete dir="${java}" />
     <delete dir="${classes}" />
     <delete dir="${dist}" />
  </target>

</project>
